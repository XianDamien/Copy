---
description: 
globs: 
alwaysApply: true
---
RIPER-5 MODE: STRICT OPERATIONAL PROTOCOL
MODE DECLARATION
Every response must start with [MODE: MODE_NAME]. No exceptions.
Do not switch modes unless explicitly instructed with:

ENTER RESEARCH MODE
ENTER INNOVATE MODE
ENTER PLAN MODE
ENTER EXECUTE MODE
ENTER REVIEW MODE
MODES
[MODE: RESEARCH]
Purpose: Information gathering and deep understanding

Core Thinking Application:

Break down technical components systematically
Map known/unknown elements clearly
Consider broader architectural implications
Identify key technical constraints and requirements
Permitted:

Reading files
Asking clarifying questions
Understanding code structure
Analyzing system architecture
Identifying technical debt or constraints
Creating a task file (see Task File Template below)
Creating a feature branch
Forbidden:

Suggestions
Implementations
Planning
Any hint of action or solution
Research Protocol Steps:

Create feature branch (if needed):

git checkout -b task/[TASK_IDENTIFIER]_[TASK_DATE_AND_NUMBER]
Create task file (if needed):

mkdir -p .tasks && touch ".tasks/${TASK_FILE_NAME}_[TASK_IDENTIFIER].md"
Analyze code related to task:

Identify core files/functions
Trace code flow
Document findings for later use
Thinking Process:

Hmm... [reasoning process with systems thinking approach]
Output Format:
Begin with [MODE: RESEARCH], then ONLY observations and questions.
Format answers using markdown syntax.
Avoid bullet points unless explicitly requested.

Duration: Until explicit signal to move to next mode
[MODE: INNOVATE]
Purpose: Explore possible solutions.
Allowed: Brainstorming, pros/cons.
Forbidden: Decisions, concrete plans, code.
Exit: Only on ENTER PLAN MODE.
[MODE: PLAN]
Purpose: Create complete implementation plan.
Allowed: Define file paths, functions, detailed changes.
Forbidden: Writing code.
Requirement: End with numbered checklist.
Exit: Only on ENTER EXECUTE MODE.
[MODE: EXECUTE]
Purpose: Follow plan exactly.
Allowed: Only whatâ€™s in the approved checklist.
Forbidden: Deviation, improvements, assumptions.
If change needed: Stop and switch to PLAN mode.
Exit: Only on ENTER REVIEW MODE.
[MODE: REVIEW]
Purpose: Compare implementation to plan.
Requirement: Flag all mismatches.
End with either:

IMPLEMENTATION MATCHES PLAN EXACTLY
IMPLEMENTATION DEVIATES FROM PLAN
TASK EXECUTION RULES
1. Create a .md file per task in /code/issues/, named after the task.
2. reak the task into subtasks and list them in the same file.
3. Update the task list whenever changes are made.
4. Every task must include testing.
5. Only implement one task at a time.
6. Accept implementation only if all related tests pass.
7. Write code with testing in mind.
8. Keep changes isolated to the current task.
9. Update docstrings (args, return, raises) as needed.
10. Update existing tests if affected.
11. after each problem-solving execution, there should be a summary md doc which briefly explains the root causes, review solutions and the implications/ experience.

The Task file *.md must incluce the specific bash command for executing the specific test for each test.


# Context
Filename: [Task Filename.md]
Created On: [DateTime]
Created By: [Username/AI]
Associated Protocol: RIPER-5 + Multidimensional + Agent Protocol

# Task Description
[Full task description provided by the user]

# Project Overview
[Project details entered by the user or brief project information automatically inferred by AI based on context]
---
*The following sections are maintained by the AI during protocol execution*
---

# Analysis (Populated by RESEARCH mode)
[Code investigation results, key files, dependencies, constraints, etc.]

# Proposed Solution (Populated by INNOVATE mode)
[Different approaches discussed, pros/cons evaluation, final favored solution direction]

# Implementation Plan (Generated by PLAN mode)
[Final checklist including detailed steps, file paths, function signatures, etc.]
