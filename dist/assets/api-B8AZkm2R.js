import{c as n}from"./globals-CJoeM3h1.js";/**
 * @license lucide-react v0.390.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const o=n("BarChart3",[["path",{d:"M3 3v18h18",key:"1s2lah"}],["path",{d:"M18 17V9",key:"2bz60n"}],["path",{d:"M13 17V5",key:"1frdt8"}],["path",{d:"M8 17v-3",key:"17ska0"}]]);/**
 * @license lucide-react v0.390.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const g=n("BookOpen",[["path",{d:"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z",key:"vv98re"}],["path",{d:"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z",key:"1cyq3y"}]]);/**
 * @license lucide-react v0.390.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const u=n("Plus",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"M12 5v14",key:"s699le"}]]);class r{async sendMessage(e,s){const a={type:e,payload:s,source:this.getSource()};try{const t=await chrome.runtime.sendMessage(a);if(!t.success)throw new Error(t.error||"Unknown error");return t.data}catch(t){throw console.error(`API call failed: ${e}`,t),t}}getSource(){return typeof window<"u"?window.location.pathname.includes("popup")?"popup":window.location.pathname.includes("options")?"options":window.location.pathname.includes("main")?"main":"content":"background"}async createDeck(e){return this.sendMessage("CREATE_DECK",e)}async getAllDecks(){return this.sendMessage("GET_ALL_DECKS")}async getDeckById(e){return this.sendMessage("GET_DECK_BY_ID",{id:e})}async updateDeck(e,s){return this.sendMessage("UPDATE_DECK",{id:e,updates:s})}async deleteDeck(e){return this.sendMessage("DELETE_DECK",{id:e})}async getDeckStats(e){return this.sendMessage("GET_DECK_STATS",{deckId:e})}async getDeckStatistics(e){return this.getDeckStats(e)}async createNote(e){return this.sendMessage("CREATE_NOTE",e)}async getNotesByDeck(e){return this.sendMessage("GET_NOTES_BY_DECK",{deckId:e})}async updateNote(e,s){return this.sendMessage("UPDATE_NOTE",{id:e,updates:s})}async deleteNote(e){return this.sendMessage("DELETE_NOTE",{id:e})}async getNoteById(e){return this.sendMessage("GET_NOTE_BY_ID",{id:e})}async getDueCards(e,s){return this.sendMessage("GET_DUE_CARDS",{deckId:e,limit:s})}async reviewCard(e,s,a){return this.sendMessage("REVIEW_CARD",{cardId:e,rating:s,reviewTime:a})}async getReviewPredictions(e){return this.sendMessage("GET_CARD_PREDICTIONS",{cardId:e})}async getCardsByDeckId(e){return this.sendMessage("GET_CARDS_BY_DECK",{deckId:e})}async getFSRSConfig(){return this.sendMessage("GET_FSRS_CONFIG")}async updateFSRSConfig(e){return this.sendMessage("UPDATE_FSRS_CONFIG",e)}async getDeckFSRSStats(e){return this.sendMessage("GET_DECK_FSRS_STATS",{deckId:e})}async analyzeCardPerformance(e){return this.sendMessage("ANALYZE_CARD_PERFORMANCE",{cardId:e})}async getUserConfig(){return this.sendMessage("GET_USER_CONFIG")}async saveUserConfig(e){return this.sendMessage("SAVE_USER_CONFIG",e)}async getDatabaseSize(){return this.sendMessage("GET_DATABASE_SIZE")}async validateDatabaseIntegrity(){return this.sendMessage("VALIDATE_DATABASE_INTEGRITY")}async clearAllData(){return this.sendMessage("CLEAR_ALL_DATA")}async storeAudio(e){return this.sendMessage("STORE_AUDIO",e)}async getAudio(e){return this.sendMessage("GET_AUDIO",{id:e})}async deleteAudio(e){return this.sendMessage("DELETE_AUDIO",{id:e})}}const c=new r,{createDeck:E,getAllDecks:D,getDeckById:h,updateDeck:y,deleteDeck:_,getDeckStats:A,createNote:S,getNotesByDeck:C,updateNote:l,deleteNote:M,getDueCards:T,reviewCard:k,getReviewPredictions:p,getFSRSConfig:R,updateFSRSConfig:I,getDeckFSRSStats:N,analyzeCardPerformance:f,getUserConfig:w,saveUserConfig:G,getDatabaseSize:B,clearAllData:O,storeAudio:v,getAudio:F,deleteAudio:U}=c;export{r as A,g as B,u as P,o as a};
