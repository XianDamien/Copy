import React, { useState, useEffect } from 'react';
import { ArrowLeft, RotateCcw, CheckCircle } from 'lucide-react';
import { ApiClient } from '../../shared/utils/api';
import type { Card, Note, AppRating, Deck, UserSettings } from '../../shared/types';
import { DEFAULT_USER_SETTINGS } from '../../shared/types';
import { getSettings } from '../../shared/utils/settingsService';
import toast from 'react-hot-toast';
import SidePanel from '../components/review/SidePanel';
import ReviewControls from '../components/review/ReviewControls';
import CardDisplay from '../components/review/CardDisplay';
import TaskDisplay from '../components/review/TaskDisplay';
import TranslationInput from '../components/review/TranslationInput';
import TaskControls from '../components/review/TaskControls';
import EvaluationDisplay from '../components/review/EvaluationDisplay';
import SelfEvaluationControls from '../components/review/SelfEvaluationControls';

interface ReviewProps {
  deckId?: number | null;
  onBack?: () => void;
}

type ReviewState = 'deck-selection' | 'loading' | 'question' | 'task-question' | 'task-evaluation' | 'answer' | 'completed' | 'no-cards' | 'evaluation';

interface CardWithNote extends Card {
  note: Note;
}

export const Review: React.FC<ReviewProps> = ({ deckId, onBack }) => {
  const [reviewState, setReviewState] = useState<ReviewState>(deckId ? 'loading' : 'deck-selection');
  const [selectedDeckId, setSelectedDeckId] = useState<number | null>(null);
  const [decks, setDecks] = useState<Deck[]>([]);
  const [cards, setCards] = useState<CardWithNote[]>([]);
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [reviewedCards, setReviewedCards] = useState(0);

  const [cardsForEvaluation, setCardsForEvaluation] = useState<CardWithNote[]>([]);
  const [showTranslation, setShowTranslation] = useState(false);
  const [evaluationIndex, setEvaluationIndex] = useState(0);
  const [showHint, setShowHint] = useState(false);
  const [editedNotes, setEditedNotes] = useState<string | null>(null);
  const [isNoteDirty, setIsNoteDirty] = useState(false);
  const [userTranslation, setUserTranslation] = useState('');
  const [userSettings, setUserSettings] = useState<UserSettings>(DEFAULT_USER_SETTINGS);
  const [isSidePanelOpen, setIsSidePanelOpen] = useState(false);

  const apiClient = new ApiClient();

  useEffect(() => {
    // Load user settings first, then start review
    const loadUserSettings = async () => {
      try {
        const settings = await getSettings();
        setUserSettings(settings);
        
        // Only start review after settings are loaded
        if (deckId) {
          // If deckId is provided, start review immediately for that deck
          startReview(deckId);
        } else {
          // Otherwise, load decks for selection screen
          loadDecks();
        }
      } catch (error) {
        console.error('Failed to load user settings:', error);
        // Fallback to default settings and continue
        if (deckId) {
          startReview(deckId);
        } else {
          loadDecks();
        }
      }
    };

    loadUserSettings();
  }, [deckId]);

  // Keyboard shortcuts for review interface
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      if (reviewState === 'answer') {
        switch (event.key) {
          case '1':
            event.preventDefault();
            submitRating('Again');
            break;
          case '2':
            event.preventDefault();
            submitRating('Hard');
            break;
          case '3':
            event.preventDefault();
            submitRating('Good');
            break;
          case '4':
            event.preventDefault();
            submitRating('Easy');
            break;
          case 'e':
          case 'E':
            event.preventDefault();
            handleEditCard();
            break;
          case 's':
          case 'S':
            event.preventDefault();
            handleSkipCard();
            break;
        }
      } else if (reviewState === 'question') {
        switch (event.key) {
          case ' ':
          case 'Enter':
            event.preventDefault();
            showAnswer();
            break;
          case 'e':
          case 'E':
            event.preventDefault();
            handleEditCard();
            break;
        }
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => document.removeEventListener('keydown', handleKeyPress);
  }, [reviewState, cards, currentCardIndex]);

  const loadDecks = async () => {
    try {
      const allDecks = await apiClient.getAllDecks();
      setDecks(allDecks);
    } catch (error) {
      console.error('Failed to load decks:', error);
    }
  };

  const startReview = async (deckId: number | null = null) => {
    setReviewState('loading');
    setSelectedDeckId(deckId);

    try {
      // Phase 2.2: Use new scheduler service instead of getDueCards
      const dueCards = await apiClient.buildQueue(deckId, 20);
      
      if (dueCards.length === 0) {
        setReviewState('no-cards');
        return;
      }

      // 获取卡片对应的笔记信息
      const cardsWithNotes: CardWithNote[] = [];
      for (const card of dueCards) {
        try {
          const note = await apiClient.getNoteById(card.noteId);
          if (note) {
            cardsWithNotes.push({ ...card, note });
          }
        } catch (error) {
          console.error(`Failed to load note for card ${card.id}:`, error);
        }
      }

      if (cardsWithNotes.length > 0) {
        setCards(cardsWithNotes);
        setCurrentCardIndex(0);
        setReviewedCards(0);
        setUserTranslation(''); // 清空用户翻译
        
        // 根据第一张卡片的状态决定初始界面
        const firstCard = cardsWithNotes[0];
        console.log('DEBUG: First card state:', firstCard.state);
        console.log('DEBUG: User settings:', userSettings);
        console.log('DEBUG: enableTraditionalLearningSteps:', userSettings.enableTraditionalLearningSteps);
        
        if (isTaskMode(firstCard)) {
          console.log('DEBUG: Setting reviewState to task-question');
          setReviewState('task-question');
        } else {
          console.log('DEBUG: Setting reviewState to question');
          setReviewState('question');
        }
      } else {
        setReviewState('no-cards');
      }
    } catch (error) {
      console.error('Failed to start review:', error);
      alert('启动复习失败，请重试');
      setReviewState('deck-selection');
    }
  };

  const showAnswer = () => {
    setReviewState('answer');
  };

  const submitRating = async (rating: AppRating) => {
    const currentCard = cards[currentCardIndex];
    if (!currentCard) return;

    try {
      // 提交评分到FSRS系统
      await apiClient.reviewCard(currentCard.id, rating === 'Again' ? 1 : rating === 'Hard' ? 2 : rating === 'Good' ? 3 : 4);
      
      setReviewedCards(prev => prev + 1);

      // 检查是否还有更多卡片
      if (currentCardIndex < cards.length - 1) {
        setCurrentCardIndex(prev => prev + 1);
        setUserTranslation(''); // 清空用户翻译
        
        // 根据下一张卡片的状态决定界面
        const nextCard = cards[currentCardIndex + 1];
        if (isTaskMode(nextCard)) {
          setReviewState('task-question');
        } else {
          setReviewState('question');
        }
      } else {
        setReviewState('completed');
      }
    } catch (error) {
      console.error('Failed to submit rating:', error);
      alert('提交评分失败，请重试');
    }
  };

  const resetReview = () => {
    setReviewState('deck-selection');
    setSelectedDeckId(null);
    setCards([]);
    setCurrentCardIndex(0);
    setReviewedCards(0);
    setCardsForEvaluation([]);
  };

  /**
   * Handle resetting card progress for a deck or all cards
   * Phase 2.2: New bulk reset functionality
   */
  const handleResetDeckCards = async (deckId: number | null) => {
    const deckName = deckId ? decks.find(d => d.id === deckId)?.name || `牌组 ${deckId}` : '所有牌组';
    
    const confirmed = window.confirm(
      `确定要重置 ${deckName} 中所有卡片的复习进度吗？\n\n这将清除这些卡片的所有学习记录，将它们重置为新卡片状态。此操作无法撤销。`
    );

    if (!confirmed) return;

    try {
      const resetCount = await apiClient.resetCardsInDeck(deckId);
      toast.success(`成功重置 ${deckName} 中的 ${resetCount} 张卡片`);
    } catch (error) {
      console.error('Failed to reset cards:', error);
      toast.error('重置失败，请重试');
    }
  };

  const handleEditCard = () => {
    setIsSidePanelOpen(!isSidePanelOpen);
  };

  const handleSkipCard = async () => {
    // Skip card by marking as 'Again' but continuing without user interaction
    await submitRating('Again');
  };

  const getCurrentCard = () => cards[currentCardIndex];

  // 判断当前卡片是否应该使用任务模式
  const isTaskMode = (card: CardWithNote) => {
    console.log('DEBUG: isTaskMode called with card.state:', card.state);
    console.log('DEBUG: isTaskMode userSettings.enableTraditionalLearningSteps:', userSettings.enableTraditionalLearningSteps);
    const result = (card.state === 'New' || card.state === 'Relearning') && !userSettings.enableTraditionalLearningSteps;
    console.log('DEBUG: isTaskMode result:', result);
    return result;
  };

  const handleShowTranslation = () => {
    setShowTranslation(true);
  };

  // 新增的处理函数
  const handleToggleHint = () => {
    setShowHint(!showHint);
  };

  // Task 1.3: 新的任务相关事件处理器
  const handleUserTranslationChange = (text: string) => {
    setUserTranslation(text);
  };

  const handleSubmitTask = () => {
    setReviewState('task-evaluation');
  };

  const handleSkipTask = () => {
    submitRating('Again');
  };

  const handleSelfEvaluation = (rating: AppRating) => {
    submitRating(rating);
  };

  const handlePreviousCard = async () => {
    // 如果有未保存的更改，先保存
    if (isNoteDirty) {
      await handleSaveChanges();
    }
    
    if (currentCardIndex > 0) {
      setCurrentCardIndex(prev => prev - 1);
      setUserTranslation(''); // 清空用户翻译
      
      // 根据新卡片的状态决定界面
      const newCard = cards[currentCardIndex - 1];
      if (isTaskMode(newCard)) {
        setReviewState('task-question');
      } else {
        setReviewState('question');
      }
      
      // 重置编辑状态
      setEditedNotes(null);
      setIsNoteDirty(false);
    }
  };

  const handleNextCard = async () => {
    // 如果有未保存的更改，先保存
    if (isNoteDirty) {
      await handleSaveChanges();
    }
    
    if (currentCardIndex < cards.length - 1) {
      setCurrentCardIndex(prev => prev + 1);
      setUserTranslation(''); // 清空用户翻译
      
      // 根据新卡片的状态决定界面
      const newCard = cards[currentCardIndex + 1];
      if (isTaskMode(newCard)) {
        setReviewState('task-question');
      } else {
        setReviewState('question');
      }
      
      // 重置编辑状态
      setEditedNotes(null);
      setIsNoteDirty(false);
    }
  };

  // 新的简化笔记更新函数 - 只更新本地状态
  const handleNoteUpdate = (newContent: string) => {
    setEditedNotes(newContent);
    setIsNoteDirty(true);
  };

  // Task 3.3: 防抖的笔记字段更新函数
  const handleNoteFieldUpdate = async (fieldName: 'english' | 'notes', content: string) => {
    const currentCard = getCurrentCard();
    if (!currentCard) return;

    try {
      const updatedFields = {
        ...currentCard.note.fields,
        CtoE: {
          chinese: currentCard.note.fields.CtoE?.chinese || '',
          english: currentCard.note.fields.CtoE?.english || '',
          pinyin: currentCard.note.fields.CtoE?.pinyin,
          userTranslation: currentCard.note.fields.CtoE?.userTranslation,
          notes: currentCard.note.fields.CtoE?.notes,
          [fieldName]: content
        }
      };

      await apiClient.updateNote(currentCard.note.id, { fields: updatedFields });
      
      // 更新本地卡片数据
      const updatedCards = [...cards];
      updatedCards[currentCardIndex] = {
        ...currentCard,
        note: {
          ...currentCard.note,
          fields: updatedFields
        }
      };
      setCards(updatedCards);
      
      toast.success('保存成功');
    } catch (error) {
      console.error('Failed to update note field:', error);
      toast.error('保存失败，请重试');
    }
  };

  // 手动保存更改
  const handleSaveChanges = async () => {
    if (!editedNotes || !isNoteDirty) return;

    const currentCard = getCurrentCard();
    if (!currentCard) return;

    try {
      const updatedFields = {
        ...currentCard.note.fields,
        CtoE: {
          ...currentCard.note.fields.CtoE,
          notes: editedNotes
        }
      };

      await apiClient.updateNote(currentCard.note.id, { fields: updatedFields });
      
      // 更新本地状态
      setCards(prevCards => 
        prevCards.map(card => 
          card.id === currentCard.id 
            ? { 
                ...card, 
                note: { 
                  ...card.note, 
                  fields: updatedFields 
                } 
              } as CardWithNote
            : card
        )
      );

      // 重置编辑状态
      setEditedNotes(null);
      setIsNoteDirty(false);
      toast.success('笔记已保存');
    } catch (error) {
      console.error('Failed to update note:', error);
      toast.error('保存笔记失败');
    }
  };

  const handleEvaluationComplete = async (difficulty: 'easy' | 'medium' | 'hard') => {
    const currentCard = cardsForEvaluation[evaluationIndex];
    if (!currentCard) return;

    try {
      // Update card difficulty and schedule next review
      const interval = difficulty === 'easy' ? 30 : difficulty === 'medium' ? 15 : 5;
      const nextReview = new Date();
      nextReview.setMinutes(nextReview.getMinutes() + interval);

      await apiClient.updateCard({
        ...currentCard,
        due: nextReview,
        state: 'Learning'
      });

      if (evaluationIndex < cardsForEvaluation.length - 1) {
        setEvaluationIndex(prev => prev + 1);
        setShowTranslation(false);
      } else {
        setReviewState('completed');
      }
    } catch (error) {
      console.error('Failed to update card:', error);
      toast.error('Failed to save evaluation');
    }
  };

  const renderDeckSelection = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-primary-900">选择复习内容</h2>
          <p className="text-primary-600 mt-1">选择要复习的牌组或复习所有到期卡片</p>
        </div>
        {onBack && (
          <button
            onClick={onBack}
            className="flex items-center space-x-2 text-primary-600 hover:text-primary-700 transition-colors"
          >
            <ArrowLeft className="w-4 h-4" />
            <span>返回</span>
          </button>
        )}
      </div>

      {/* 复习所有卡片选项 */}
      <div className="card-industrial p-6 hover:shadow-lg transition-shadow">
        <div className="flex items-center justify-between">
          <div className="flex-1">
            <h3 className="text-lg font-semibold text-primary-900 mb-2">复习所有到期卡片</h3>
            <p className="text-primary-600">复习所有牌组中的到期卡片</p>
          </div>
          <div className="flex items-center space-x-3">
            {/* Reset Button */}
            <button
              onClick={() => handleResetDeckCards(null)}
              className="flex items-center space-x-2 px-4 py-2 bg-red-50 text-red-700 rounded-md hover:bg-red-100 transition-colors"
              title="重置所有卡片进度"
            >
              <RotateCcw className="w-4 h-4" />
              <span className="text-sm font-medium">重置进度</span>
            </button>
            {/* Review Button */}
            <button
              onClick={() => startReview(null)}
              className="flex items-center space-x-2 px-6 py-2 bg-accent-600 text-white rounded-md hover:bg-accent-700 transition-colors"
            >
              <CheckCircle className="w-5 h-5" />
              <span className="font-medium">开始复习</span>
            </button>
          </div>
        </div>
      </div>

      {/* 各个牌组选项 */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-primary-900">或选择特定牌组</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {decks.map(deck => (
            <div 
              key={deck.id}
              className="card-industrial p-4 hover:shadow-lg transition-shadow"
            >
              <h4 className="font-semibold text-primary-900 mb-1">{deck.name}</h4>
              {deck.description && (
                <p className="text-sm text-primary-600 mb-3">{deck.description}</p>
              )}
              <div className="flex items-center justify-between">
                <div className="text-xs text-primary-500">
                  点击按钮开始复习此牌组
                </div>
                <div className="flex items-center space-x-2">
                  {/* Reset Button for Deck */}
                  <button
                    onClick={() => handleResetDeckCards(deck.id)}
                    className="flex items-center space-x-1 px-3 py-1 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 transition-colors"
                    title={`重置 ${deck.name} 的所有卡片进度`}
                  >
                    <RotateCcw className="w-3 h-3" />
                    <span>重置</span>
                  </button>
                  {/* Review Button for Deck */}
                  <button
                    onClick={() => startReview(deck.id)}
                    className="flex items-center space-x-1 px-3 py-1 bg-accent-600 text-white rounded text-xs hover:bg-accent-700 transition-colors"
                  >
                    <CheckCircle className="w-3 h-3" />
                    <span>复习</span>
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderLoading = () => (
    <div className="text-center py-16">
      <div className="flex items-center justify-center space-x-3 text-primary-600">
        <RotateCcw className="w-8 h-8 animate-spin" />
        <span className="text-lg font-medium">正在加载复习卡片...</span>
      </div>
    </div>
  );

  const renderNoCards = () => (
    <div className="text-center py-16">
      <CheckCircle className="w-16 h-16 mx-auto text-green-500 mb-4" />
      <h3 className="text-xl font-bold text-primary-900 mb-2">暂无到期卡片</h3>
      <p className="text-primary-600 mb-6">
        {selectedDeckId ? '该牌组' : '所有牌组'}中暂时没有需要复习的卡片
      </p>
      <button
        onClick={resetReview}
        className="btn-primary"
      >
        重新选择
      </button>
    </div>
  );

  // Task 3.1: 新的任务界面渲染函数
  const renderTaskInterface = () => {
    const currentCard = getCurrentCard();
    console.log('DEBUG: renderTaskInterface called');
    console.log('DEBUG: renderTaskInterface currentCard:', currentCard);
    console.log('DEBUG: renderTaskInterface reviewState:', reviewState);
    
    if (!currentCard) {
      console.log('DEBUG: renderTaskInterface returning null - no currentCard');
      return null;
    }

    if (reviewState === 'task-question') {
      console.log('DEBUG: renderTaskInterface rendering task-question interface');
      return (
        <div className="max-w-4xl mx-auto p-6 space-y-6">
          <TaskDisplay originalText={currentCard.note.fields.CtoE?.chinese || ''} />
          <TranslationInput 
            value={userTranslation} 
            onChange={handleUserTranslationChange} 
          />
          <TaskControls 
            onSubmit={handleSubmitTask} 
            onSkip={handleSkipTask} 
          />
        </div>
      );
    }

    if (reviewState === 'task-evaluation') {
      console.log('DEBUG: renderTaskInterface rendering task-evaluation interface');
      return (
        <div className="max-w-4xl mx-auto p-6 space-y-6">
          <EvaluationDisplay
            originalText={currentCard.note.fields.CtoE?.chinese || ''}
            userTranslation={userTranslation}
            referenceTranslation={currentCard.note.fields.CtoE?.english || ''}
          />
          <SelfEvaluationControls onEvaluate={handleSelfEvaluation} />
        </div>
      );
    }

    console.log('DEBUG: renderTaskInterface returning null - reviewState not matching');
    return null;
  };

  const renderReviewInterface = () => {
    const currentCard = getCurrentCard();
    if (!currentCard) return null;

    // Task 3.2: 判断是否使用任务模式
    const isTaskModeActive = isTaskMode(currentCard);
    console.log('DEBUG: renderReviewInterface - reviewState:', reviewState);
    console.log('DEBUG: renderReviewInterface - isTaskModeActive:', isTaskModeActive);
    
    if (isTaskModeActive) {
      console.log('DEBUG: renderReviewInterface entering task mode branch');
      console.log('DEBUG: about to call renderTaskInterface');
      const taskInterface = renderTaskInterface();
      console.log('DEBUG: renderTaskInterface returned:', taskInterface);
      
      return (
        <div className="flex h-screen">
          {/* SidePanel for task mode */}
          <SidePanel
            referenceTranslation={currentCard.note.fields.CtoE?.english || ''}
            studyNotes={currentCard.note.fields.CtoE?.notes || ''}
            isOpen={showHint}
            onToggle={handleToggleHint}
            onReferenceChange={(content) => handleNoteFieldUpdate('english', content)}
            onNotesChange={(content) => handleNoteFieldUpdate('notes', content)}
          />

          {/* 主要内容区域 - 任务模式 */}
          <div className={`flex-1 transition-all duration-300 ${showHint ? 'mr-[300px]' : 'mr-0'}`}>
            <div className="flex items-center justify-between p-6 border-b border-primary-200">
              <button
                onClick={resetReview}
                className="flex items-center space-x-2 text-primary-600 hover:text-primary-700 transition-colors"
              >
                <ArrowLeft className="w-4 h-4" />
                <span>重新选择</span>
              </button>
              
              <div className="flex items-center space-x-4">
                <div className="text-sm text-primary-600">
                  {currentCardIndex + 1} / {cards.length}
                </div>
                <div className="text-sm text-primary-600">
                  已完成: {reviewedCards}
                </div>
              </div>
            </div>

            {/* 进度条 */}
            <div className="px-6 py-4">
              <div className="w-full bg-primary-200 rounded-full h-2">
                <div 
                  className="bg-accent-500 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${((currentCardIndex) / cards.length) * 100}%` }}
                />
              </div>
            </div>

            {taskInterface}
          </div>
        </div>
      );
    }

    // 传统复习模式
    return (
      <div className="flex h-screen">
        {/* 编辑面板 */}
        <SidePanel
          referenceTranslation={currentCard.note.fields.CtoE?.english || ''}
          studyNotes={currentCard.note.fields.CtoE?.notes || ''}
          isOpen={isSidePanelOpen}
          onToggle={() => setIsSidePanelOpen(!isSidePanelOpen)}
          onReferenceChange={(content) => handleNoteFieldUpdate('english', content)}
          onNotesChange={(content) => handleNoteFieldUpdate('notes', content)}
        />

        {/* 主要内容区域 */}
        <div className={`flex-1 transition-all duration-300 ${isSidePanelOpen ? 'mr-[300px]' : 'mr-0'}`}>
          <div className="max-w-4xl mx-auto p-6 space-y-6">
            {/* 顶部导航栏 */}
        <div className="flex items-center justify-between">
            <button
              onClick={resetReview}
              className="flex items-center space-x-2 text-primary-600 hover:text-primary-700 transition-colors"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>重新选择</span>
            </button>
              
              <div className="flex items-center space-x-4">
                <div className="text-sm text-primary-600">
                  {currentCardIndex + 1} / {cards.length}
                </div>
            <div className="text-sm text-primary-600">
                  已完成: {reviewedCards}
            </div>
          </div>
        </div>

        {/* 进度条 */}
        <div className="w-full bg-primary-200 rounded-full h-2">
          <div 
            className="bg-accent-500 h-2 rounded-full transition-all duration-300"
            style={{ width: `${((currentCardIndex) / cards.length) * 100}%` }}
          />
        </div>

            {/* 卡片显示区域 */}
            <CardDisplay
              note={currentCard.note}
              showAnswer={reviewState === 'answer'}
              onNoteChange={handleNoteUpdate}
              editedNotes={editedNotes}
              isDirty={isNoteDirty}
              onSave={handleSaveChanges}
            />

            {/* 控制按钮区域 */}
            <ReviewControls
              reviewState={reviewState}
              onShowAnswer={showAnswer}
              onSubmitRating={submitRating}
              onEditCard={handleEditCard}
              onSkipCard={handleSkipCard}
              onPreviousCard={handlePreviousCard}
              onNextCard={handleNextCard}
              canGoPrevious={currentCardIndex > 0}
              canGoNext={currentCardIndex < cards.length - 1}
              currentCardIndex={currentCardIndex}
              totalCards={cards.length}
            />
          </div>
        </div>
      </div>
    );
  };

  const renderEvaluation = () => {
    const currentCard = cardsForEvaluation[evaluationIndex];
    if (!currentCard) return null;

    return (
      <div className="space-y-6">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">Evaluate Your Understanding</h2>
          <p className="text-gray-600 mb-8">
            Card {evaluationIndex + 1} of {cardsForEvaluation.length}
          </p>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6 space-y-4">
          <div className="text-lg font-medium">{currentCard.note.fields.CtoE?.chinese || '内容加载失败'}</div>
          
          {!showTranslation ? (
            <button
              onClick={handleShowTranslation}
              className="w-full py-2 text-blue-600 hover:text-blue-800 focus:outline-none"
            >
              Show Translation
            </button>
          ) : (
            <div className="text-gray-700 pt-4 border-t">
              {currentCard.note.fields.CtoE?.english || '内容加载失败'}
            </div>
          )}

          {showTranslation && (
            <div className="flex justify-center space-x-4 pt-6">
              <button
                onClick={() => handleEvaluationComplete('hard')}
                className="px-6 py-2 bg-red-100 text-red-700 rounded-md hover:bg-red-200"
              >
                Hard
              </button>
              <button
                onClick={() => handleEvaluationComplete('medium')}
                className="px-6 py-2 bg-yellow-100 text-yellow-700 rounded-md hover:bg-yellow-200"
              >
                Medium
              </button>
              <button
                onClick={() => handleEvaluationComplete('easy')}
                className="px-6 py-2 bg-green-100 text-green-700 rounded-md hover:bg-green-200"
              >
                Easy
              </button>
            </div>
          )}
        </div>
      </div>
    );
  };

  const renderCompleted = () => (
    <div className="text-center py-16">
      <CheckCircle className="w-20 h-20 mx-auto text-green-500 mb-6" />
      <h3 className="text-2xl font-bold text-primary-900 mb-4">复习完成！</h3>
      <p className="text-lg text-primary-600 mb-2">
        本次复习了 {reviewedCards} 张卡片
      </p>
      <p className="text-primary-500 mb-8">
        系统已根据你的评分安排下次复习时间
      </p>
      
      <div className="space-x-4">
        <button
          onClick={resetReview}
          className="btn-primary"
        >
          再次复习
        </button>
        {onBack && (
          <button
            onClick={onBack}
            className="btn-secondary"
          >
            返回首页
          </button>
        )}
      </div>
    </div>
  );

  const renderCurrentState = () => {
    switch (reviewState) {
      case 'deck-selection':
        return renderDeckSelection();
      case 'loading':
        return renderLoading();
      case 'question':
      case 'answer':
        return renderReviewInterface();
      case 'task-question':
      case 'task-evaluation':
        return renderReviewInterface(); // 任务模式也使用renderReviewInterface
      case 'evaluation':
        return renderEvaluation();
      case 'completed':
        return renderCompleted();
      case 'no-cards':
        return renderNoCards();
      default:
        return null;
    }
  };

  return (
    <div className="space-y-6">
      {renderCurrentState()}
    </div>
  );
}; 